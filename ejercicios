# Ejercicios Haskell

## 1. Ejercicio 1
let reverseList [] = []; reverseList (x:xs) = reverseList xs ++ [x]
reverseList [1, 2, 3, 4, 5]

## 2. Ejercicio 2
 let isPalindrome :: (Eq a) => [a] -> Bool; isPalindrome xs = xs == reverse xs
 isPalindrome "reconocer"

## 3. Ejercicio 3
 let sumList :: [Int] -> Int; sumList [] = 0; sumList (x:xs) = x + sumList xs 
 sumList [1,2,4,5,6]

## 4. Ejercicio 4
let maxList :: [Int] -> Int; maxList [] = error "Lista vacÃ­a"; maxList [x] = x; maxList (x:xs) = max x (maxList x)
maxList [1,2,4,10,100]

## 5. Ejercicio 5
let fibonacci :: Int -> Int; fibonacci 0=0; fibonacci 1=1; fibonacci n = fibonacci (n-1) + fibonacci (n-2)
fibonacci 6
